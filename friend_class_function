class Node {
private:
	int key;
	Node* next;
	/* Other members of Node Class */

	// Now class LinkedList can
	// access private members of Node
	friend class LinkedList;
};
************************************************
class Node {
private:
	int key;
	Node* next;

	/* Other members of Node Class */
	friend int LinkedList::search();
	// Only search() of linkedList
	// can access internal members
};
*****************************************************
#include <iostream>
using namespace std;

class A
{
private:
    int x;

public:
    A()
    {
        x = 0;
    }
    friend void show();
};
class B : public A
{
private:
    int y;

public:
    B() : y(0) {}
};
void show()
{
    B b;
    cout << b.x << endl;
    //friend of base class cannot access private member of derived class
    cout << b.y << endl;//error
}
int main()
{
    show();
}
**************************************************************
#include <iostream>
 
class A {
    int a;
 
public:
    A() { a = 0; }
 
    // global friend function
    friend void showA(A&);
};
 
void showA(A& x)
{
    // Since showA() is a friend, it can access
    // private members of A
    std::cout << "A::a=" << x.a;
}
 
int main()
{
    A a;
    showA(a);
    return 0;
}
*********************************************************************


#include <iostream>
 
class B;
 
class A {
public:
    void showB(B&);
};
 
class B {
private:
    int b;
 
public:
    B() { b = 0; }
    friend void A::showB(B& x); // Friend function
};
 
void A::showB(B& x)
{
    // Since showB() is friend of B, it can
    // access private members of B
    std::cout << "B::b = " << x.b;
}
 
int main()
{
    A a;
    B x;
    a.showB(x);
    return 0;
}
********************************************************************************

#include <bits/stdc++.h>
#include <iostream>
using namespace std;
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
#define speed                     \
	ios_base::sync_with_stdio(0); \
	cin.tie(0);                   \
	cout.tie(0);
#define ll long long
#define pb push_back
#define mem1(a) memset(a, -1, sizeof(a))
#define mem0(a) memset(a, 0, sizeof(a))
#define setp(x) fixed << setprecision(x)
#define endl "\n"
#define mod 1000000007
#define mod1 998244353
#define ff first
#define ss second
#define MAX 100005
#define N 500005
#define INF 10000000000000000
#define all(v) v.begin(), v.end()
#define sbit(a) __builtin_popcount(a)
template <typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
typedef pair<ll, ll> pll;
typedef pair<pll, ll> ppl;
typedef map<ll, ll> mpll;
typedef map<vector<ll>, ll> mpvl;
ll power(ll x, ll y, ll p)
{
	ll res = 1;

	x = x % p;

	if (x == 0)
		return 0;
	while (y > 0)
	{

		if (y & 1)
			res = (res * x) % p;

		y = y >> 1;
		x = (x * x) % p;
	}

	return res;
}
class inte2;
class inte
{
private:
	int a;

public:
	inte(int x)
	{
		a = x;
	}
	friend void sum(inte,inte2);
};
class inte2
{
private:
	int a;

public:
	inte2(int x)
	{
		a = x;
	}
	friend void sum(inte,inte2);
};
void sum(inte i1, inte2 i2)
{
	cout << i1.a + i2.a << endl;
}
void solve()
{
	inte i1(2);
	inte2 i2(4);
	sum(i1, i2);
}
int main()
{
	speed;
	ll kk;
	kk = 1;
	// cin >> kk;
	while (kk--)
	{
		solve();
	}
}
***********************************************************************************