#include <bits/stdc++.h>
#include <iostream>
using namespace std;
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
#define speed                     \
	ios_base::sync_with_stdio(0); \
	cin.tie(0);                   \
	cout.tie(0);
#define ll long long
#define pb push_back
#define mem1(a) memset(a, -1, sizeof(a))
#define mem0(a) memset(a, 0, sizeof(a))
#define setp(x) fixed << setprecision(x)
#define endl "\n"
#define mod 1000000007
#define mod1 998244353
#define ff first
#define ss second
#define MAX 100005
#define N 500005
#define INF 10000000000000000
#define all(v) v.begin(), v.end()
#define sbit(a) __builtin_popcount(a)
template <typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
typedef pair<ll, ll> pll;
typedef pair<pll, ll> ppl;
typedef map<ll, ll> mpll;
typedef map<vector<ll>, ll> mpvl;
ll power(ll x, ll y, ll p)
{
	ll res = 1;

	x = x % p;

	if (x == 0)
		return 0;
	while (y > 0)
	{

		if (y & 1)
			res = (res * x) % p;

		y = y >> 1;
		x = (x * x) % p;
	}

	return res;
}
/*class A
{
public:
	A() { cout << "A's Constructor Called " << endl; }
};

class B
{
	static A a;

public:
	B() { cout << "B's Constructor Called " << endl; }
};
A B::a;//class A's object in scope resolution of class B//if we dont define it then A's constructor is not called

// The above program calls only B’s constructor, it doesn’t call A’s constructor. The reason for this is 
// simple, static members are only declared in class declaration, not defined. They must be explicitly 
// defined outside the class using scope resolution operator. If we try to access static member ‘a’
//  without explicit definition of it, we will get compilation error.*/

/*class A
{
	int x;

public:
	A() { cout << "A's constructor called " << endl; }
};

class B
{
	static A a;

public:
	B() { cout << "B's constructor called " << endl; }
	static A getA() { return a; }
};

A B::a; // definition of a
void solve()
{
	B b1, b2, b3;
	// 	A's constructor called
	// B's constructor called
	// B's constructor called
	// B's constructor called
	A a = b1.getA();
	return;
}
// Note that the above program calls B’s constructor 3 times for 3 objects (b1, b2 and b3), but calls
//  A’s constructor only once. The reason is, static members are shared among all objects. That is why
//  they are also known as class members or class fields. Also, static members can be accessed without
// any object, see the below program where static member ‘a’ is accessed without any object.*/
int main()
{
	speed;
	ll kk;
	kk = 1;
	// cin >> kk;
	while (kk--)
	{
		solve();
	}
}